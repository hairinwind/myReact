import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchQuote, fetchQuoteStream } from  './QuoteAPI'

const initialState = {
    value: [],
    status: 'idle',
};

export const fetchQuoteAsync = createAsyncThunk(
    'quote/getQuote',
    async () => {
        console.log('before fetchQuote...');
        const response = await fetchQuote();
        // The value we return becomes the `fulfilled` action payload
        console.log("getQuote response.data", response.data);
        return response.data;
    }
);

export const QuoteSlice = createSlice({
    name: 'quote',
    initialState,
    reducers: {
      getQuote: (state, action) => {
          console.log('getQuote...');
          state.value = action.payload;
      },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(fetchQuoteAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(fetchQuoteAsync.fulfilled, (state, action) => {
          state.status = 'idle';
          state.value.push(action.payload);
        });
    },
});

export const selectQuote = (state) => state.quote.value;

export const { getQuote } = QuoteSlice.actions;

export default QuoteSlice.reducer;